--Basic TRIGGERS-----
CREATE TABLE widgetCustomer ( id INTEGER PRIMARY KEY, name TEXT, last_order_id INT );
CREATE TABLE widgetSale ( id INTEGER PRIMARY KEY, item_id INT, customer_id INT, quan INT, price INT );

INSERT INTO widgetCustomer (name) VALUES ('Bob');
INSERT INTO widgetCustomer (name) VALUES ('Sally');
INSERT INTO widgetCustomer (name) VALUES ('Fred');

SELECT * FROM widgetCustomer;

CREATE TRIGGER newWidgetSale AFTER INSERT ON widgetSale
    BEGIN 
        UPDATE widgetCustomer SET last_order_id=NEW.id where widgetCustomer.id=NEW.customer_id;
    END;
INSERT INTO widgetsale (item_id,customer_id,quan,price) VALUES(1,3,5,1995);
INSERT INTO widgetsale (item_id,customer_id,quan,price) VALUES(2,3,5,2000);

SELECT * FROM widgetCustomer;
SELECT * FROM widgetSale;

----PREVENTING UPDATES USING TRIGGERS----
DROP TABLE IF EXISTS widgetSale;
DROP TABLE IF EXISTS  widgetCustomer;

CREATE TABLE widgetSale ( id integer primary key, item_id INT, customer_id INTEGER, quan INT, price INT,
    reconciled INT );
INSERT INTO widgetSale (item_id, customer_id, quan, price, reconciled) VALUES (1, 3, 5, 1995, 0);
INSERT INTO widgetSale (item_id, customer_id, quan, price, reconciled) VALUES (2, 2, 3, 1495, 1);
INSERT INTO widgetSale (item_id, customer_id, quan, price, reconciled) VALUES (3, 1, 1, 2995, 0);
SELECT * FROM widgetSale;

CREATE TRIGGER updateWidgetSale BEFORE UPDATE ON widgetSale
    BEGIN
    SELECT RAISE (ROLLBACK,'Can''t UPDATE TABLE "WIDGET SALE" ') FROM WIDGETSALE
    where id = NEW.id or reconciled=1;
    END;

UPDATE widgetSale SET quan=9 WHERE id=2;

select *from widgetSale;

---USING TRIGGERS TO CREATE TIMESTAMP---
DROP TABLE IF EXISTS widgetCustomer;
DROP TABLE IF EXISTS widgetSale;
DROP TABLE IF EXISTS widgetlog;
CREATE TABLE widgetCustomer ( id integer primary key, name TEXT, last_order_id INT, stamp TEXT );
CREATE TABLE widgetSale ( id integer primary key, item_id INT, customer_id INTEGER, quan INT, price INT, stamp TEXT );
CREATE TABLE widgetLog ( id integer primary key, stamp TEXT, event TEXT, username TEXT, tablename TEXT, table_id INT);

INSERT INTO widgetCustomer (name) VALUES ('Bob');
INSERT INTO widgetCustomer (name) VALUES ('Sally');
INSERT INTO widgetCustomer (name) VALUES ('Fred');
SELECT * FROM widgetCustomer;
 
CREATE TRIGGER stampSale AFTER INSERT ON widgetSale
    BEGIN
    UPDATE widgetSale SET Stamp=DATETIME('now') where id=NEW.id;
    UPDATE widgetCustomer SET last_order_id=NEW.id,stamp=DATETIME('NOW')
        WHERE widgetCustomer.id=New.customer_id;
    INSERT INTO widgetLog(stamp,event,username,tablename,table_id)
        VALUES(DATETIME('now'), 'INSERT','TRIGGER','widgetSale',NEW.id);
    END
;
INSERT INTO widgetSale(item_id,customer_id,quan,price) VALUES(1,3,5,1995);
INSERT INTO widgetSale(item_id,customer_id,quan,price) VALUES(2,4,6,1995);
INSERT INTO widgetSale(item_id,customer_id,quan,price) VALUES(3,5,7,1995);
select *from widgetLog;
select *from widgetCustomer;
select *from widgetSale;
DROP TRIGGER IF EXISTS stampSale;
DROP TABLE IF EXISTS widgetLog;
DROP TABLE IF EXISTS widgetCustomer;
DROP TABLE IF EXISTS widgetSale;
